{"version":3,"sources":["../src/app.js"],"names":["app","config","require","knex","bcrypt","passport","LocalStrategy","Strategy","session","use","initialize","keys","skip","env","ctx","next","status","throw","err","statusCode","body","message","emit","routes"],"mappings":"2EAAA,0B;AACA,iC;AACA,uC;AACA,+C;AACA,kC;;AAEA,MAAMA,MAAM,mBAAZ;AACA,MAAMC,SAASC,QAAQ,aAAR,EAAuB,aAAvB,CAAf;AACA,MAAMC,OAAOD,QAAQ,MAAR,EAAgBD,MAAhB,CAAb;AACA,MAAMG,SAASF,QAAQ,QAAR,CAAf;AACA,MAAMG,WAAWH,QAAQ,cAAR,CAAjB;AACA,MAAMI,gBAAgBJ,QAAQ,gBAAR,EAA0BK,QAAhD;AACA,MAAMC,UAAUN,QAAQ,aAAR,CAAhB;;AAEAF,IAAIS,GAAJ,CAAQJ,SAASK,UAAT,EAAR;AACAV,IAAIS,GAAJ,CAAQJ,SAASG,OAAT,EAAR;AACAR,IAAIW,IAAJ,GAAW,CAAC,kBAAD,CAAX;AACAX,IAAIS,GAAJ,CAAQD,QAAQR,GAAR,CAAR;;;AAGA;AACAA,IAAIS,GAAJ,CAAQ,8BAAR;;AAEA;AACAT,IAAIS,GAAJ;AACE,yBAAO,KAAP,EAAc;AACZG,QAAM,MAAMZ,IAAIa,GAAJ,KAAY,MADZ,EAAd,CADF;;;;AAMA;AACAb,IAAIS,GAAJ,CAAQ,qBAAR;;AAEA;AACAT,IAAIS,GAAJ,CAAQ,OAAOK,GAAP,EAAYC,IAAZ,KAAqB;AAC3B,MAAI;AACF,UAAMA,MAAN;AACA,QAAID,IAAIE,MAAJ,KAAe,GAAnB,EAAwB;AACtBF,UAAIG,KAAJ,CAAU,GAAV;AACD;AACF,GALD,CAKE,OAAOC,GAAP,EAAY;AACZJ,QAAIE,MAAJ,GAAaE,IAAIC,UAAJ,IAAkBD,IAAIF,MAAtB,IAAgC,GAA7C;AACAF,QAAIM,IAAJ,GAAW;AACTD,kBAAYL,IAAIE,MADP;AAETK,eAASH,IAAIG,OAFJ,EAAX;;AAIAP,QAAId,GAAJ,CAAQsB,IAAR,CAAa,OAAb,EAAsBJ,GAAtB,EAA2BJ,GAA3B;AACD;AACF,CAdD;;AAgBA;AACAd,IAAIS,GAAJ,CAAQ,iBAAOc,MAAP,EAAR,E;;AAEevB,G","file":"app.js","sourcesContent":["import Koa from 'koa';\nimport cors from '@koa/cors';\nimport logger from 'koa-morgan';\nimport bodyParser from 'koa-bodyparser';\nimport router from './routes';\n\nconst app = new Koa();\nconst config = require('../knexfile')['development'];\nconst knex = require('knex')(config);\nconst bcrypt = require('bcrypt');\nconst passport = require('koa-passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst session = require('koa-session');\n\napp.use(passport.initialize());\napp.use(passport.session());\napp.keys = ['super-secret-key'];\napp.use(session(app));\n\n\n// Set middlewares\napp.use(bodyParser());\n\n// Logger\napp.use(\n  logger('dev', {\n    skip: () => app.env === 'test'\n  })\n);\n\n// Enable CORS\napp.use(cors());\n\n// Default error handler middleware\napp.use(async (ctx, next) => {\n  try {\n    await next();\n    if (ctx.status === 404) {\n      ctx.throw(404);\n    }\n  } catch (err) {\n    ctx.status = err.statusCode || err.status || 500;\n    ctx.body = {\n      statusCode: ctx.status,\n      message: err.message\n    };\n    ctx.app.emit('error', err, ctx);\n  }\n});\n\n// Routes\napp.use(router.routes());\n\nexport default app;\n"]}